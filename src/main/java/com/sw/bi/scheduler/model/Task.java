package com.sw.bi.scheduler.model;

// Generated 2011-12-23 15:16:52 by Hibernate Tools 3.4.0.CR1

import com.sw.bi.scheduler.util.Configure;
import com.sw.bi.scheduler.util.Configure.JobCycle;
import com.sw.bi.scheduler.util.Configure.TaskStatus;
import com.sw.bi.scheduler.util.DateUtil;
import org.codehaus.jackson.annotate.JsonIgnore;

import java.util.Arrays;
import java.util.Collection;
import java.util.Date;

/**
 * Task generated by hbm2java
 */
public class Task implements java.io.Serializable, AuthenticationUserGroup {

	private Long taskId;
	private Job job;
	private Long jobId;
	private Date settingTime;
	private long taskStatus;
	private String jobName;
	private String jobDesc;
	private String jobBusinessGroup;
	private Long jobType;
	private int cycleType;
	private long dutyOfficer;
	private Date taskDate;
	private Date scanDate;
	private Date taskBeginTime;
	private Date taskEndTime;
	private Long runTime;
	private Long referRunTime; // 参考运行时长(生成任务时取前一天的时长)
	private long jobLevel;
	private long flag;
	private Date readyTime;
	private long alert;
	private Date createTime;
	private Date updateTime;
	private Long updateBy;
	private Long lastActionId;
	private Long lastActionIdForBreakpoint; // 该字段只用于断点重跑
	private long needContinueRun;
	private int runTimes;
	private String operateNo;
	private String preTasks; // 前置任务(通过前置作业生成的前置任务)
	private String preTasksFromOperate; // 前置任务(通过串行补数据操作时生成)
	private Long beforeSupplyStatus; // 补数据前的状态(可用于补数据取消)
	private String gateway; // 作业中带过来的“执行网关机”
	private Integer failureRerunTimes; // 作业失败重跑次数
	private Integer failureRerunInterval; // 作业失败重跑间隔时长(分钟)

	/**
	 * 该字段应该就是flag字段的一种延伸 flag字段放的是重跑、系统和补数据
	 * flag2字段放的应该是新上线和加权,因为这二种在前台和Action表中并不需要被查看或记录,只是为了提供某个任务的优先级而设置的
	 */
	private Integer flag2;

	/**
	 * 父任务(该字段只在获取指定深度的子任务时才会有值)
	 */
	private Collection<Task> parents;

	/**
	 * 该任务是否合并而成
	 */
	private boolean merge = false;

	// 以下属性用于分析任务未运行原因

	/**
	 * 分析类型
	 */
	private String analyseType;

	/**
	 * 分析任务未运行时用于分组的名称
	 */
	private String analyseGroupName;

	/**
	 * 任务在参考点中的位置
	 */
	private Integer analyseReferPointIndex;

	/**
	 * 用户组
	 */
	private UserGroup userGroup;

	public Task() {}

	public Task(/*Job job*/Long jobId, Date settingTime, long taskStatus, String jobName, String jobBusinessGroup, long dutyOfficer, Date taskDate, Date scanDate, long jobLevel, long flag,
			long alert, Date createTime, int runTimes) {
		// this.job = job;
		this.jobId = jobId;
		this.settingTime = settingTime;
		this.taskStatus = taskStatus;
		this.jobName = jobName;
		this.jobBusinessGroup = jobBusinessGroup;
		this.dutyOfficer = dutyOfficer;
		this.taskDate = taskDate;
		this.scanDate = scanDate;
		this.jobLevel = jobLevel;
		this.flag = flag;
		this.alert = alert;
		this.createTime = createTime;
		this.runTimes = runTimes;
	}

	public Task(/*Job job*/Long jobId, Date settingTime, long taskStatus, String jobName, String jobDesc, String jobBusinessGroup, long dutyOfficer, Date taskDate, Date scanDate, Date taskBeginTime,
			Date taskEndTime, long jobLevel, long flag, Date readyTime, long alert, Date createTime, Date updateTime, long needContinueRun, int runTimes) {
		// this.job = job;
		this.jobId = jobId;
		this.settingTime = settingTime;
		this.taskStatus = taskStatus;
		this.jobName = jobName;
		this.jobDesc = jobDesc;
		this.jobBusinessGroup = jobBusinessGroup;
		this.dutyOfficer = dutyOfficer;
		this.taskDate = taskDate;
		this.scanDate = scanDate;
		this.taskBeginTime = taskBeginTime;
		this.taskEndTime = taskEndTime;
		this.jobLevel = jobLevel;
		this.flag = flag;
		this.readyTime = readyTime;
		this.alert = alert;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.needContinueRun = needContinueRun;
		this.runTimes = runTimes;
	}

	public Long getTaskId() {
		return this.taskId;
	}

	public void setTaskId(Long taskId) {
		this.taskId = taskId;
	}

	/*public Job getJob() {
		return this.job;
	}

	public void setJob(Job job) {
		this.job = job;
	}*/

	public Long getJobId() {
		return jobId;
	}

	public void setJobId(Long jobId) {
		this.jobId = jobId;
	}

	public Date getSettingTime() {
		return this.settingTime;
	}

	public void setSettingTime(Date settingTime) {
		this.settingTime = settingTime;
	}

	public long getTaskStatus() {
		return this.taskStatus;
	}

	public void setTaskStatus(long taskStatus) {
		this.taskStatus = taskStatus;
	}

	public String getJobName() {
		return this.jobName;
	}

	public void setJobName(String jobName) {
		this.jobName = jobName;
	}

	public String getJobDesc() {
		return this.jobDesc;
	}

	public void setJobDesc(String jobDesc) {
		this.jobDesc = jobDesc;
	}

	public String getJobBusinessGroup() {
		return this.jobBusinessGroup;
	}

	public void setJobBusinessGroup(String jobBusinessGroup) {
		this.jobBusinessGroup = jobBusinessGroup;
	}

	public Long getJobType() {
		return jobType;
	}

	public void setJobType(Long jobType) {
		this.jobType = jobType;
	}

	public int getCycleType() {
		return cycleType;
	}

	public void setCycleType(int cycleType) {
		this.cycleType = cycleType;
	}

	public long getDutyOfficer() {
		return this.dutyOfficer;
	}

	public void setDutyOfficer(long dutyOfficer) {
		this.dutyOfficer = dutyOfficer;
	}

	public Date getTaskDate() {
		return this.taskDate;
	}

	public void setTaskDate(Date taskDate) {
		this.taskDate = taskDate;
	}

	public Date getScanDate() {
		return this.scanDate;
	}

	public void setScanDate(Date scanDate) {
		this.scanDate = scanDate;
	}

	public Date getTaskBeginTime() {
		return this.taskBeginTime;
	}

	public void setTaskBeginTime(Date taskBeginTime) {
		this.taskBeginTime = taskBeginTime;
	}

	public Date getTaskEndTime() {
		return this.taskEndTime;
	}

	public void setTaskEndTime(Date taskEndTime) {
		this.taskEndTime = taskEndTime;
	}

	public Long getRunTime() {
		return runTime;
	}

	public void setRunTime(Long runTime) {
		this.runTime = runTime;
	}

	public Long getReferRunTime() {
		return referRunTime;
	}

	public void setReferRunTime(Long referRunTime) {
		this.referRunTime = referRunTime;
	}

	public long getJobLevel() {
		return this.jobLevel;
	}

	public void setJobLevel(long jobLevel) {
		this.jobLevel = jobLevel;
	}

	public long getFlag() {
		return this.flag;
	}

	public void setFlag(long flag) {
		this.flag = flag;
	}

	public Integer getFlag2() {
		return flag2;
	}

	public void setFlag2(Integer flag2) {
		this.flag2 = flag2;
	}

	public Date getReadyTime() {
		return this.readyTime;
	}

	public void setReadyTime(Date readyTime) {
		this.readyTime = readyTime;
	}

	public long getAlert() {
		return this.alert;
	}

	public void setAlert(long alert) {
		this.alert = alert;
	}

	public Date getCreateTime() {
		return this.createTime;
	}

	public int getRunTimes() {
		return this.runTimes;
	}

	public void setRunTimes(int runTimes) {
		this.runTimes = runTimes;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	public Date getUpdateTime() {
		return this.updateTime;
	}

	public void setUpdateTime(Date updateTime) {
		this.updateTime = updateTime;
	}

	public Long getUpdateBy() {
		return updateBy;
	}

	public void setUpdateBy(Long updateBy) {
		this.updateBy = updateBy;
	}

	public Long getLastActionId() {
		return lastActionId;
	}

	public void setLastActionId(Long lastActionId) {
		this.lastActionId = lastActionId;
	}

	public Long getLastActionIdForBreakpoint() {
		return lastActionIdForBreakpoint;
	}

	public void setLastActionIdForBreakpoint(Long lastActionIdForBreakpoint) {
		this.lastActionIdForBreakpoint = lastActionIdForBreakpoint;
	}

	public void setNeedContinueRun(long needContinueRun) {
		this.needContinueRun = needContinueRun;
	}

	public long getNeedContinueRun() {
		return needContinueRun;
	}

	public String getOperateNo() {
		return operateNo;
	}

	public void setOperateNo(String operateNo) {
		this.operateNo = operateNo;
	}

	public Collection<Task> getParents() {
		return parents;
	}

	public void setParents(Collection<Task> parents) {
		this.parents = parents;
	}

	public String getPreTasks() {
		return preTasks;
	}

	public void setPreTasks(String preTasks) {
		this.preTasks = preTasks;
	}

	public void setPreTasksByCollection(Collection<Task> preTasks) {
		if (preTasks == null || preTasks.size() == 0) {
			this.preTasks = null;
			return;
		}

		StringBuffer taskIds = new StringBuffer();
		for (Task task : preTasks) {
			if (taskIds.length() > 0) {
				taskIds.append(",");
			}
			taskIds.append(task.getTaskId());
		}

		if (taskIds.length() > 0) {
			this.preTasks = taskIds.toString();
		}
	}

	public String getPreTasksFromOperate() {
		return preTasksFromOperate;
	}

	public void setPreTasksFromOperate(String preTasksFromOperate) {
		this.preTasksFromOperate = preTasksFromOperate;
	}

	public void setPreTasksFromOperateByCollection(Collection<Task> preTasksFromOperate) {
		if (preTasksFromOperate == null || preTasksFromOperate.size() == 0) {
			this.preTasksFromOperate = null;
			return;
		}

		StringBuffer taskIds = new StringBuffer();
		for (Task task : preTasksFromOperate) {
			if (taskIds.length() > 0) {
				taskIds.append(",");
			}
			taskIds.append(task.getTaskId());
		}

		if (taskIds.length() > 0) {
			this.preTasksFromOperate = taskIds.toString();
		}
	}

	public Long getBeforeSupplyStatus() {
		return beforeSupplyStatus;
	}

	public void setBeforeSupplyStatus(Long beforeSupplyStatus) {
		this.beforeSupplyStatus = beforeSupplyStatus;
	}

	public String getGateway() {
		return gateway;
	}

	public void setGateway(String gateway) {
		this.gateway = gateway;
	}

	public Integer getFailureRerunTimes() {
		return failureRerunTimes;
	}

	public void setFailureRerunTimes(Integer failureRerunTimes) {
		this.failureRerunTimes = failureRerunTimes;
	}

	public Integer getFailureRerunInterval() {
		return failureRerunInterval;
	}

	public void setFailureRerunInterval(Integer failureRerunInterval) {
		this.failureRerunInterval = failureRerunInterval;
	}

	public boolean isMerge() {
		return merge;
	}

	public void setMerge(boolean merge) {
		this.merge = merge;
	}

	public String getAnalyseType() {
		return analyseType;
	}

	public void setAnalyseType(String analyseType) {
		this.analyseType = analyseType;
	}

	public String getAnalyseGroupName() {
		return analyseGroupName;
	}

	public void setAnalyseGroupName(String analyseGroupName) {
		this.analyseGroupName = analyseGroupName;
	}

	public Integer getAnalyseReferPointIndex() {
		return analyseReferPointIndex;
	}

	public void setAnalyseReferPointIndex(Integer analyseReferPointIndex) {
		this.analyseReferPointIndex = analyseReferPointIndex;
	}

	public UserGroup getUserGroup() {
		return userGroup;
	}

	public void setUserGroup(UserGroup userGroup) {
		this.userGroup = userGroup;
	}

	public String getName() {
		int cycleType = this.getCycleType();
		String jobName = this.getJobName();

		if (JobCycle.HOUR.indexOf() == cycleType || JobCycle.MINUTE.indexOf() == cycleType) {
			Date settingTime = this.getSettingTime();
			return jobName + "(" + DateUtil.format(settingTime, "HH:mm") + ")";
		}

		return jobName;
	}

	/**
	 * 获得任务的尾号
	 * 
	 * @return
	 */
	public int getTailNumber() {
		String num = String.valueOf(this.getTaskId());
		return Integer.parseInt(num.substring(num.length() - 1));
	}

	@JsonIgnore
	public boolean isRoot() {
		// return this.getJob().getJobId() == 1;
		return this.getJobId() == 1;
	}

	@JsonIgnore
	public boolean isRunSuccess() {
		return Arrays.binarySearch(Configure.TASK_FOREGROUND_SUCCESS_STATUS, this.getTaskStatus()) >= 0;
	}

	@JsonIgnore
	public boolean isRunFailure() {
		return Arrays.binarySearch(Configure.TASK_FOREGROUND_FAILURE_STATUS, this.getTaskStatus()) >= 0;
	}

	@JsonIgnore
	public boolean isRunning() {
		return Arrays.binarySearch(Configure.TASK_FOREGROUND_RUNNING_STATUS, this.getTaskStatus()) >= 0;
	}

	@JsonIgnore
	public boolean isNotRunning() {
		return Arrays.binarySearch(Configure.TASK_FOREGROUND_NOT_RUNNING_STATUS, this.getTaskStatus()) >= 0;
	}

	@JsonIgnore
	public boolean isTriggered() {
		return this.getTaskStatus() == TaskStatus.TRIGGERED.indexOf() || this.getTaskStatus() == TaskStatus.RE_TRIGGERED.indexOf();
	}

	@JsonIgnore
	public boolean isInitialize() {
		return this.getTaskStatus() == TaskStatus.INITIALIZE.indexOf() || this.getTaskStatus() == TaskStatus.RE_INITIALIZE.indexOf();
	}

	@Override
	@JsonIgnore
	public String toString() {
		long taskStatus = this.getTaskStatus();
		String status = "";
		if (TaskStatus.INITIALIZE.indexOf() == taskStatus) {
			status = "初始化";
		} else if (TaskStatus.RE_INITIALIZE.indexOf() == taskStatus) {
			status = "重做初始化";
		} else if (TaskStatus.WAIT_TRIGGER.indexOf() == taskStatus) {
			status = "未触发";
		} else if (TaskStatus.RE_WAIT_TRIGGER.indexOf() == taskStatus) {
			status = "重做未触发";
		} else if (TaskStatus.TRIGGERED.indexOf() == taskStatus) {
			status = "已触发";
		} else if (TaskStatus.RE_TRIGGERED.indexOf() == taskStatus) {
			status = "重做已触发";
		} else if (TaskStatus.RUNNING.indexOf() == taskStatus) {
			status = "运行中";
		} else if (TaskStatus.RE_RUNNING.indexOf() == taskStatus) {
			status = "重做运行中";
		} else if (TaskStatus.RUN_SUCCESS.indexOf() == taskStatus) {
			status = "运行成功";
		} else if (TaskStatus.RE_RUN_SUCCESS.indexOf() == taskStatus) {
			status = "重做成功";
		} else if (TaskStatus.RUN_FAILURE.indexOf() == taskStatus) {
			status = "运行失败";
		} else if (TaskStatus.RE_RUN_FAILURE.indexOf() == taskStatus) {
			status = "重做失败";
		}

		// 任务尾号
		char tailNumber = ' ';
		String tid = String.valueOf(getTaskId());
		tailNumber = tid.charAt(tid.length() - 1);

		return "作业[作业ID: " + getJobId() + ", 任务日期: " + DateUtil.formatDate(getTaskDate()) + ", 名称: " + getJobName() + ", 预设时间: " + DateUtil.formatDateTime(getSettingTime()) + ", 状态: " + status +
				",尾号: " + tailNumber + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((jobId == null) ? 0 : jobId.hashCode());
		result = prime * result + ((taskId == null) ? 0 : taskId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Task other = (Task) obj;
		if (jobId == null) {
			if (other.jobId != null)
				return false;
		} else if (!jobId.equals(other.jobId))
			return false;
		if (taskId == null) {
			if (other.taskId != null)
				return false;
		} else if (!taskId.equals(other.taskId))
			return false;
		return true;
	}

	@Override
	public Long getUserId() {
		return this.getDutyOfficer();
	}

	@Override
	public String getEntityName() {
		return "任务";
	}

	@Override
	public String getLoggerName() {
		return this.getName() + "(作业ID: " + this.getJobId() + ", 预设时间: " + DateUtil.formatDateTime(this.getSettingTime()) + ")";
	}
}
